EXPLICACION DJANGO REST.

pirmero creamos el proyecto de django, luego creamos una apliacion, cada vez que creemos una se guarda en settings.
Creamos el modelo de la aplicacion con sus campos.
Lo ponemos en admin.py para que se pueda ver desde el panel de administrador.
para crear el crud creamos una carpeta api con los 5 documentos .py dentro
creamos el serializers, la vista, permisos y lo enrutamis en router.py y luego se guarda la ruta en url principal
_____________________________________________________________________________________________________________





1- creas entorno virtual desde nuevo proyecto pycharm

2- instalas django 
	pip install django

2- Creas proyecto 
	django-admin startproject futbol

3- entramos al proyecto
	cd futbol

4- levantamos servidor
	python .\manage.py runserver

??????Con python .\manage.py help ->   vemos todos los comandos que hay

5- Hacemos override del usuario para decirle que la clave primaria sera el email y no el user
5.1- Creamos nueva app llamada users
	python .\manage.py startapp users
5.2 Añadimos la aplicacion creada en settings (installed_pps)

5.3 Creamos el modelo de User
	class User(AbstractUser):
    		pass

5.4 Marcamos el directorio futbol, osea el nombre que le hemos dado al proyecto django, boton derecho y abajo de todo 'Mark directory' ass ->Sourcees root

5.5 Añadimos el modelo user en el panel administrador (admin.py)
	from django.contrib import admin
	from futbol.users.models import User
	from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
	@admin.register(User)
	class UserAdmin(BaseUserAdmin):
    		pass

5.6 Le decimos que los usuarios se van a controlar desde esta aplicacion, en settings.py abajo de todo poner:
	AUTH_USER_MODEL = 'users.User'  (le estamos diciendo que en la carpeta users el modelo user)

5.7 Hacemos la migracion para el modelo userAdmin
	python .\manage.py makemigrations
5.8 Hacemos la migracion para que crea las tablas del usuario
python .\manage.py migrate

5.9 Creamos el Usuario    python manage.py createsuperuser
5.9.1 Podemos arrancar el servidor e ir a /admin   todavia el user no es el email

5.9.2 Ponemos el email envez de el nombre de usuario->vamos models.py de users
	from django.contrib.auth.models import AbstractUser
	from django.db import models
	class User(AbstractUser):
    		email = models.EmailField(unique=True)

    	USERNAME_FIELD = 'email'
    	REQUIRED_FIELDS = []

5.9.3 Levantamos servidor y ya nos pide el email.

6. Una vez creado el override de usuario, instalamos django-rest-framework
	pip install djangorestframework
	INSTALLED_APPS = [...'rest_framework'] 	en settings

7. Ahora vamos a instalar la documentacion para ver todos los endpoint que vayamos haciendo. (drf-yasg)
	pip install -U drf-yasg
	INSTALLED_APPS = [...,'drf_yasg',...]	en settings
	En url.py poner esto:
	_______________________
	from django.contrib import admin, from django.urls import path, from drf_yasg.views import get_schema_view, from drf_yasg import openapi

	schema_view = get_schema_view(
   	openapi.Info(
      	title="Futbol API",
      	default_version='v1',
      	description="Documentacion de la API de futbol de David",
      	terms_of_service="", #TO DO URL DE TERMINOS Y CONDICIONES
      	contact=openapi.Contact(email="david_berdiell_hotmail.com"),
      	license=openapi.License(name="BSD License"),
   	),
   	public=True,
   	# permission_classes=[permissions.AllowAny],
	)


	urlpatterns = [
    		path('admin/', admin.site.urls),
    		path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    		path('redocs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
	]
7.1 ya podemops ir a las reutas del servidor docs y redocs. Si no se ven hay que generar los estaticos.
	en settings abajo de todo, debajo de static_url.->     STATIC_ROOT ='./static/'
	EN LA TERMINAL-> 	python .\manage.py collectstatic
	se crea sola la carpeta static y ya podemos lanzar el servidor
_________________________________________________________________

8. PRIMER ENDPOINT (REGISTRO DE USUARIO)
8.1 Dentro de la carpeta user creamos una carpeta llamada api
8.2 Dentro de api creamos 4 documentos (__init__.py, router.py, serializers.py, views.py)
8.3 __init__.py -> este documento tiene que estar siempre creado en todas las carepetas de django, se deja vacio.

8.7 serializers.py sirve para gestionar los datos que entran y salen en las peticiones (creamos el serializador para crear usuarios)
	from rest_framework import serializers
	from users.models import User

	class UserRegisterSerializer(serializers.ModelSerializer):
   		class Meta:
        	model = User
        	fields = ['id', 'email', 'username', 'password']

8.4 views.py (La vista donde el usuario se podra registrar)
	from rest_framework import status, from rest_framework.response import Response, from rest_framework.views import APIView, from users.api.serializers import UserRegisterSerializer

	class RegisterView(APIView):
    		def post(self, request):
        		serializer = UserRegisterSerializer(data=request.data)
        		if serializer.is_valid(raise_exception=True):
            			serializer.save()
            			return Response(serializer.data)
        		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

8.5 En router.py registramos la vista
	from django.urls import path, from users.api.views import RegisterView
	urlpatterns = [path('auth/register', RegisterView.as_view()),]
8.6 Lo añadimos en el sistema de rutas principal (futbol / urls.py)
	urlpatterns = [
    		path('admin/', admin.site.urls),
    		path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    		path('redocs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    		path('api/', include('users.api.router'))
	]

8.7 ya podemos probar el endpoint: se envia un diccionario
{
    "email": "holaquetal@gmail.com", "username": "davidb", "password": "aaaaaa"
}

8.8 Encriptar la contraseña cuando el usuario se registra. en serializers.py poner:
class UserRegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'username', 'password']
    # encriptar password
    def create(self, validated_data):
        password =validated_data.pop('password',None)
        instance = self.Meta.model(**validated_data)
        if password is not None:
            instance.set_password(password)
        instance.save()
        return instance

9. Iniciar sesion (endpoint token)
9.1 instalamos simple jwt->    pip install djangorestframework-simplejwt
9.2 en settings.py pegamos esto abajo de todo:
	REST_FRAMEWORK = {
    		'DEFAULT_AUTHENTICATION_CLASSES': (
        		'rest_framework_simplejwt.authentication.JWTAuthentication',
    		)
	}

9.3 En users/api/router.py poner esto:
from django.urls import path, from users.api.views import RegisterView, from rest_framework_simplejwt.views import (TokenObtainPairView,TokenRefreshView,)

urlpatterns = [
    path('auth/register', RegisterView.as_view()),
    path('auth/login/', TokenObtainPairView.as_view()),
    path('auth/token/refresh/', TokenRefreshView.as_view())
]
9.4 Ya tenemos los dos endpoint, el de login que te devuelve el token y refresh token, y el de refresh_token para poder refrescarlo cuando quieras.
_______________________________________________________________________________________
10. Endpoint que nos devuelbe los datos del usuario, excepto el password
10.1 en users-serializers.py creamos una nueva clase

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'username', 'first_name', 'last_name']

10.2 en users- views.py  creamos una nueva clase debajo de la de registerView
	class UserView(APIView):
    		permission_classes =[IsAuthenticated]
    		def get(self, request):
        		serializer = UserSerializer(request.user)
        		return Response(serializer.data)

10.3 registramos la nueva ruta:
	urlpatterns = [
    path('auth/register', RegisterView.as_view()),
    path('auth/login/', TokenObtainPairView.as_view()),
    path('auth/token/refresh/', TokenRefreshView.as_view()),
    path('auth/me', UserView.as_view()),
]

10.4 Ya podemos probar el endpoint pasandole el token

10.5 Vamos a añadir un edpoint para modificar los datos del usuario, (first_name, last_name)

10.6  Creamos un nuevo serializer
	class UserUpdateSerializer(serializers.ModelSerializer):
    		class Meta:
        		model = User
        		fields = ['first_name', 'last_name']

10.7 En views.py añadimos en la clase userView el nuevo metodo put, debajo del get.
	 def put(self, request):
        	user = User.objects.get(id=request.user.id)
        	serializer = UserUpdateSerializer(user, request.data)
        	if serializer.is_valid(raise_exception=True):
            		serializer.save()
            		return Response(serializer.data)
        	return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
_________________________________________________________________________________

11. Creamos una nueva aplicacion (Equipos)
python .\manage.py startapp equipos
11.1 Guardamos en setting- installed apps-> equipos
11.2 Creamos el modelo de equipos en equipos/models.py
	from django.db import models
	class Equipos(models.Model):
    		name = models.CharField(max_length=255)
    		slug= models.SlugField(max_length=255, unique=True)  //slug es una ruta que sea unica para ir a los equipos
    		published = models.BooleanField(default=False)
    
    		def __str__(self):   // El metodo str sirve para que cuando en el panel admin seleccionemos un equipo saldra un desplegable con los nombre de los equipos
        		return self.name

11.3 Creamos las migraciones    python .\manage.py makemigrations
11.4 las ejecutamos  python .\manage.py migrate
11.5 Lo añadimos para que aparezca en el panel de administrador.  En equipos/admin.py

	from django.contrib import admin
	from equipos.models import Equipos

	@admin.register(Equipos)
	class EquiposAdmin(admin.ModelAdmin):
   		list_display = ['name', 'published']        list_display sirve para poner los campos que queramos que aparezcan en el panel

12. Creamos el CRUD para equipos (Este lo vamos a hacer de otra forma, con el modo viewsets)
12. en quipos creamos la carpeta api, con sus 4 documentos (__init__.py, router.py, serializers.py, views.py)
12.1 Creamos el serializer en equipos.serializers.py
	from rest_framework import serializers
	from equipos.models import Equipo
	class EquipoSerializer(serializers.ModelSerializer):
    		class Meta:
        		model = Equipo
        		fields = ['id','name', 'published', 'slug']

12.2 Creamos la vista en views.py
	from django.db.models import Model
	from rest_framework.viewsets import ModelViewSet
	from equipos.models import Equipo
	from equipos.api.serializers import EquipoSerializer

	class EquipoApiViewSet(ModelViewSet):
    		serializer_class = EquipoSerializer
    		queryset = Equipo.objects.all()

12.3 lo registramos en router.py
	from rest_framework.routers import DefaultRouter
	from equipos.api.views import EquipoApiViewSet

	router_equipos = DefaultRouter()
	router_equipos.register(prefix='equipos', basename='equipos', viewset= EquipoApiViewSet)

12.4 y registramos en router en el url principal futbol/ urls.py
....
from equipos.api.router import router_equipos
.......
urlpatterns = [
    path('admin/', admin.site.urls),
    path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redocs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('api/', include('users.api.router')),
    path('api/', include(router_equipos.urls))
]

12.5 ya tenemos el crud de equipos hechos, el problema esque no tiene permisos, todo el mundo puede modificar, crear , leer sin estar logeado.

_____________________________________________________________________________________________________________________
EL PUT ACTUALIZA TODOS LOS DATOS (ESTAS OBLIGADO A PASARLE TODOS LOS DATOS) Y EL PATCH SOLO ACTUALIZA LOS CAMPOS QUE LE PASES.
EN LAS PETICIONES PONER LA BARRA / FINAL, PORQUE SI NO A VECES NO VA BIEN LA PETICION.
_____________________________________________________________________________________________________________________

12.6 vamos a añadir PERMISOS a los endpoint de equipos

en equpos/ api creamos otro documento, llamado permissions.py

	from rest_framework.permissions import BasePermission
	class isAdminOrReadOnly(BasePermission):		si haces un get todos la recibiran pero si no, solo lo podran hacer los que sean miembros del staff(admin)
    		def has_permission(self, request, view):
        		if request.method == 'GET':
           			return True
        		else:
            			return request.user.is_staff

12.7 en views.py le damos el permiso, primero lo importamos
from equipos.api.permissions import IsAdminOrReadOnly
	class EquipoApiViewSet(ModelViewSet):
    		permission_classes = [IsAdminOrReadOnly]
    		serializer_class = EquipoSerializer
    		queryset = Equipo.objects.all()

12.8 si queremos que el crud envezde por ejemplo, cuando hacemos el get de un equipo lo busqua por id que es unico, le pòdemos decir que lo busque 
por otro campo que sea unico, por ejemplo el slug. En views.py se pondria asi:
	class EquipoApiViewSet(ModelViewSet):
    		permission_classes = [IsAdminOrReadOnly]
    		serializer_class = EquipoSerializer
    		queryset = Equipo.objects.all()
		lookup_field = 'slug'

13. FILTROS

Podemos hacer busquedas filtrando lo que queramos que devuelpa el endpoint, por ejemplo:
	class EquipoApiViewSet(ModelViewSet):
   	 	permission_classes = [IsAdminOrReadOnly]
    		serializer_class = EquipoSerializer
    
    		queryset = Equipo.objects.filter(id='1')      o por ejemplo queryset = Equipo.objects.filter(published=True) 

___________________________________________________________________________________________________________________
14. Creamos la aplicacion jugadores
python .\manage.py startapp jugadores y la guardamos en settings.
14.1 Creamos el modelo:

	from django.db.models import SET_NULL
	from equipos.models import Equipo
	from users.models import User
	class Jugador(models.Model):
    		name = models.CharField(max_length=255)
    		descripcion= models.TextField()
    		slug = models.SlugField(max_length=255, unique=True)
   		miniature = models.ImageField(upload_to='jugadores/images/')  //imagen, se crera una carpeta llamada images en jugadores/images donde se guardaran
    		created_at = models.DateTimeField(auto_now_add=True)
    		published= models.BooleanField(default=False)
    		user = models.ForeignKey(User, on_delete=SET_NULL, null=True)  //ponemos que ese jugador pertenece a un user, aun que no seria asi
    		equipo = models.ForeignKey(Equipo, on_delete=SET_NULL, null=True)

		def __str__(self):
        		return self.name

14.2 Lo añadimos al panel de administracion:
	from django.contrib import admin
	from jugadores.models import Jugador

	@admin.register(Jugador)
		class JugadorAdmin(admin.ModelAdmin):
    			list_display = ['name', 'user', 'equipo', 'published']

14.3 hacemos las migraciones, makemigrations y luego migrate

15. Creamos el crud de jugadores con api y sus 5 elementos dentro:
	SERIALIZERS
from rest_framework import serializers
from jugadores.models import Jugador
class JugadorSerializer(serializers.ModelSerializer):
    class Meta:
        model =Jugador
        fields= ['name', 'descripcion', 'slug', 'miniature', 'created_at', 'user', 'equipo']
	
	PERMISSIONS
from rest_framework.permissions import BasePermission
class IsAdminOrReadOnly(BasePermission):
    def has_permission(self, request, view):
        if request.method == 'GET':
            return True
        else:
            return request.user.is_staff

	VIEWS
from django.db.models import Model
from rest_framework.viewsets import ModelViewSet
from jugadores.api.serializers import JugadorSerializer
from jugadores.models import Jugador
from jugadores.api.permissions import IsAdminOrReadOnly
from rest_framework.filters import OrderingFilter

class JugadorApiViewSet(ModelViewSet):
    permission_classes = [IsAdminOrReadOnly]
    serializer_class = JugadorSerializer
    queryset = Jugador.objects.filter(published=True)

    # Para ordenar por fecha de creado al reves los datos de la api
    filter_backends = [OrderingFilter]
    ordering = ['-created_at']

ROUTER
from rest_framework.routers import DefaultRouter
from jugadores.api.views import JugadorApiViewSet

routerJugador = DefaultRouter()
routerJugador.register(prefix='jugadores',basename='jugadores', viewset=JugadorApiViewSet)

y lo guardamos en urls.py como los anteriores.
_________________________________________________________

DJANGO FILTER
LO INSTALAMOS :    pip install django-filter
LO GUARDAMOS EN SETTINGS:  INSTALLED_APPS = [...'django_filters',]
YA LO PODEMOS USAR POR EJEMPLO EN JUGADORES/API/VIEWS:

....
.....
LO IMPORTAMOS
from django_filters.rest_framework import DjangoFilterBackend

class JugadorApiViewSet(ModelViewSet):
    permission_classes = [IsAdminOrReadOnly]
    serializer_class = JugadorSerializer
    queryset = Jugador.objects.filter(published=True)

    
    filter_backends = [OrderingFilter, DjangoFilterBackend]
ORDENAMOS LOS RESULTADOS OBTENIDOS DE LA API AL REVES DE CREATED AD
    ordering = ['-created_at']
FILTRAMOS PARA PODER BUSCAR POR EQUIPO
    filterset_fields = ['equipo']

EN EL POSTMAN EJEMPLO DE PETICION GET FILTRANDO JUGADORES ?POR EQUIPO
http://127.0.0.1:8000/api/jugadores/?equipo=5

   




	










	























