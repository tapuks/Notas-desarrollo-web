pip install django -> INSTALAS DJANGO

django-admin startproject sistema_administracion_personas -> nuevo proyecto python

python .\manage.py startapp webapp  -> nueva app

python manage.py startapp (nombre del starapp)

registrar la nueva app creada en settings.py ->  
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.staticfiles',
	...............,
    'web_app',
]

python manage.py showmigrations -> ves migraciones pendientes

python manage.py makemigrations -> crea el archivo con la migracion pendiente que vamos a ejecutar

python manage.py migrate -> haces las migraciones

python manage.py sqlmigrate persona 0001 -> ves codigo sql creado al crear una tabla

python manage.py createsuperuser -> creas super usuario para el panel de administracion

python manage.py runserver LANZAS SERVIDOR

{% csrf_token %} se usa para que otra web no rellene los campos de tu formulario y se tenga que enviar desde tu web.

PARA VER LAS OPCIONES QUE HAY EN UN MODELO POR EJEMPLO created_at = models.DateTimeField(CONTROL+ESPACIO) Y SE ABREN LAS OPCCIONES COMO AUTOCREATED=TRUE
PARA AÑADIR UNA TABLA AL PANEL DE ADMINISTRADOR:
en admin.py registrar tu modelo:
admin.site.register(Pedidos)

PARA FILTRAR LOS ELEMENTTOS DE UNA TABLA POR ID POR EJEMPLO
Pedidos.objects.get(id=6)

PARA FILTRAR LOS ELEMENTOS QUE QUIERES DE UNA TABLA:
Pedidos.objects.filter(nombre='pedido1', seccion='comida')
PARA METER UN ELEMENTO EN UNA TABLA DEL MODELO:
pedido=Pedidos.objects.create(nombre='pedido2, seccion="deporte", precio="5"
pedido.save()

models:1:N->  1 persona puede tener varios moviles, y ecada movil solo pertenece a una persona

class Persona
class Movil -> foreign Key(persona)


JUGADOR = Jugador.objects.get(equipo_id=id_equipo) ->GET DEVUELVE UN SOLO RESULTADOS
plantilla = Plantilla.objects.filter(equipo_id=id_equipo) ->FILTER DEVUELVE TODOS LOS RESULTADOS

-------DJANGO-------REST--------FRAMEWORK

Lo instalas ->  pip install djangorestframework
Lo guardas en settings---> INSTALLED_APPS = [...'rest_framework',]
dentro de nuestra app se crea una carpeta llamada api y dentro de la carpeta un fichero __init__.py y otro views.py, otro permissions.py, router.py
ININT.PY --> NADA
VIEWS--> SE CREA LA CALSE POSTMODELVIEWSET
PERMISSIONS --> CREAMOS UN PERMISO SI QUEREMOS
ROUTER--> PONEMOS LO QUE HACE FALTA DE RUTA
lo ponemos en urls.py

-----------------DRF-YASG------------------ (PARA CREAR UNA DOCUMENTACION DE LOS ENDPOINTS)

instalamos paquete -->   pip install drf-yasg
en settings --> INSTALLED_APPS = ['django.contrib.admin',........,'drf_yasg']
en la terminal --> python .\manage.py collectstatic
Te dice que hay que configurarlo en settings --> STATIC_ROOT setting to a filesystem path
en settings abajo de todo, debajo de STATIC_URL-->  STATIC_ROOT = './static/'
en la terminal --> python .\manage.py collectstatic
se crea automaticamente una carpeta llamada static
en urls se pega esto -> 
# DRF-YASG
schema_view = get_schema_view(
   openapi.Info(
      title="Documentacion API blog",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
)

urlpatterns = [
    path('admin/', admin.site.urls),
    .............
    path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redocs/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]

YA PUEDES IR A LA URL DOCS Y REDOCS

-----------CREAR OVERRIDE----------
python .\manage.py startapp user
creas el modelos:
		class User(AbstractUser):
    			pass
Guardas en settings la aplicacion user
Abajo de todo en settings -->  AUTH_USER_MODEL = 'user.User'  
Hacemos el makemigrations
Hacemos el migrate
Si da error, borramos la base de datos.
borramos las migraciones
Hacemos el makemigrations
Hacemos el migrate
en user vamos a admin.py :
			@admin.register(User)
			class UserAdministrador(UserAdmin):
    				pass

Si quieres añadir mas cosas como redes sociales , se añaden en models y luego en admin.py

----------SIMPLE-JWT-------------(token)

pip install djangorestframework-simplejwt

pegas en settings:

REST_FRAMEWORK = {
    ...
    'DEFAULT_AUTHENTICATION_CLASSES': (
        ...
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
    ...
}

mas cosas....

# PONER TIEMPO AL TOKEN Y AL REFRESH TOKEN
SIMPLE_JWT = {
    'ACCES_TOKEN_LIFETIME': datetime.timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7)
}















