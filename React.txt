code . desde la consola se abre en visual studio code

USAR MAP EN EL HTM. EL MAP DEVUELBE UN VALOR EN CADA VUELTA. USA MAP PARA RECORRER ARRAYS Y FOR-IN PARA RECORRER OBJETOS
const arrayImagenes = 'https://www.youtube.com/watch?v=QBLbX', 'https://www.youtube.com/wat'
ROW FINCTION
return (
	<div>
	    arrayImagenes.map(imagen => <img src={imagen}/>)
	</div>

)
DEVOLVIENDI MAS DE UN DATO
return (
	<div>
	    arrayImagenes.map(imagen => 
				return <> 
					<img src={imagen}/>
					<h1>imagen.title</h1>
					</>
				
				)
	</div>

)
return (
	<div>
	   {
	    arrayImagenes.map(({title, url}) => 
				return <> 
					<img src={url}/>
					<h1>title</h1>
					</>
				
				)
	    }
	</div>

)

return (
        data?.map(movie=> (
            <div>{movie.title}</div>
        )
        )
    )

    return (
        data?.map((value, index) => {
            return(
            <div>{value.title}</div>
            )
        });


forEach: (no devuelve nada)Esto itera sobre una lista y aplica alguna operación con efectos secundarios a cada miembro de la lista (ejemplo: guardar cada elemento de la lista en la base de datos)

map: Esto itera sobre una lista, transforma cada miembro de esa lista y devuelve otra lista del mismo tamaño con los miembros transformados (ejemplo: transformar la lista de cadenas a mayúsculas)
//MAP
var a = [5,10,15,20];
let c = a.map(num => {
	return num + 1;
});
//6,11,16,21

//FOR IN PARA RECORRER OBJETOS
let gatos = { nombre: "ruby", edad: 2 };
	for (let gato in gatos) {
		console.log("for in", gato);// nombre//edad
		console.log("for in", gatos[gato]);//ruby//edad
	}


//PARA RECORRER UN OBJETO CON MAP

Object.keys(data).map(function(option, index){
	console.log(option)
})

PARA DEVOLVER MAS COSAS CON MAP, O HACER EL ARRAY PUSH O let c = a.map(num => {
									<option>{a.title}</option>
									}
									return c


----------------------------
rutas -> wouter (npm install wouter) o react router dom (el que usa 4geeks)

-------------------------------------
CONTEXT

	CREAR CARPETA CONTEXT
	CREAR DOCUMENTO PROVIDER.JS
const PokemonProvider=({children})=> {
	const [pokemon, setPokemon]=useState([])
	const getPokemons=()=>FETCH A LA API POKEMON Y GUARDAMOS  EL RESULT.JSON EN setpokemon(result)


    return (
        <PokemonContext.Provider value={{getPokemons, pokemon}}>
            {children}
        </PokemonContext.Provider>
    )
}

export default PokemonProvider

	CREAR DOCUMENTO POKEMONCONTEXT

import { createContext } from "react";

const PokemonContext= createContext("pokemons")
export default PokemonContext

EN APP.JS ENVILVEMOS CON LAS ETIQUETAS POKEMONPROVIDER LAS RUTAS QUE QUERAMOS QUE SEAN ACCESIBLES

import PokemonProvider from './context/pokemons/Provider';

function App() {
  return (
    <PokemonProvider>
      <Buscar/>
    </PokemonProvider>
  );
}

EN EL DOCUMENTO QUE QUERAMOS USAR GETPOKEMONS, POR EJEMPLO EN EL COMPONENTE BUSCAR(BURCAR.JS)

import { useContext, useEffect } from "react"
import PokemonContext from "../../context/pokemons"
const Buscar=()=> {

    const {getPokemons, pokemon} = useContext(PokemonContext)

    
    useEffect(()=> {
      getPokemons()

    },[])

    console.log(pokemon)
---------------------------------
HACER DOBLE DESTRUCTURING (nos envian un objeto con varios datos por props)

export default Saludar=(props)=> {
	const {data: {nombre, apellido, edad}}= props
	console.log(apellido)
}
---------------------------------------
USE ESTATE CON VALOR OBJETO (expres operator)

const [coche, setCoche]=useState({'encendido':false, 'km':2000})

<button onClick={()=> setCoche({...coche, 'encendido': !coche.encendido})}>

setDate(prevState => [...prevState, valor[0]]);

let name = {...name, 'david':30}

__________________________________________

setArrayPalabra((prevState) => prevState.map(({ letter, encript }) => {
            if (letter == letraClick) return { letter, encript: false }
            else return { letter, encript }
        }))
______________________________________________



onChange={e => {
	const { value } = e.target;
	setNewValorsObjectModifyPoint(prevState => ({
	...prevState, high: value?
	}));
}}



CAMBIAMOS EL VALOR DE LA POSICION DE UN ARRAY POR OTRO 
arrayPerros.splice(position, 1, newValorsObjectModifyPoint.wet);
BORRAR UN VALOR DE UN ARRAY
arrayPerros.splice(INDICE, 1);




-------------------------------LIBRERIAS
MATERIAL UI
MOMENTS JS
TAILWIND CSS
NODE SASS

<<<<<<< HEAD
React-Toastify

_____________________________________
CREAR CARPETA ASSETS/IMG
CARPETA UTILS/CONSTANTS


---------------------------------------
let var1 = {}
for (let valor in data) {
	var1[valor]=data[valor]
}
//var 1 = {'david':30}




=======
//BORRAR 
const deleteTableRowFarm = farm_name => {
		const newArray = arrayFarm.filter(valor => valor.farm_name != farm_name);
		setArrayFarm(newArray);

//PASAR STATE OBJERO A STATE ARRAY
setArrayFarm(arrayFarm.concat(farm));

PARA QUE UN FOR IN VALGA EN EL RETURN, PASAR EL STATE OBJETO A ARRAY Y ENTONCES YA PUEDES USAR EL MAP Y DENTRO DEL MAP EL FOR IN


if (data?.length)

//PONER UN ESTILO O OTRO CON UNA CONDICION EN EL CLASSNAME
className={`center ${step.step1 == true && "selected"}`}
<div style={{ display: step.step1 == false ? "none" : "block" }}>
<<<<<<< HEAD

const miEstilo = {color:'red', fontSize: '16px'}
<p style={miEstilo}>hola que tal</p>

=======
num == 1 ? "A" : num == 11 ? "J" : num == 12 ? "K" : num;
<div style={fallos < 1 ? { display: 'none' } : { display: 'block' }} className={`doll_muñeco-cabeza ${fallos == 6 && 'perdido'}`}></div>
<div className='card-player-photo' style={{ backgroundImage: `url(${image_path})` }}></div>

__________________________________
INDEX.JS

export {default} from './TopMenu
___________________________________
USE FETCH

export default function useFetch(url, options) {
    const [loading, setLoading] = useState(true)
    const [result, setResult] = useState(null)
    const [error, setError] = useState(null)

    useEffect(()=> {
        (async ()=> {
            try {
                const res = await fetch(url, options);
                const json = await res.json()
                setResult(json)
                setLoading(false)
            }catch(err) {
                setError(err)
                setLoading(false)
            }
        })();

    },[url, options])

    return {loading, result, error}

}
________________________________________

PONER IMAGEN DENTRO DE UN BOTON
import { ReactComponent as CarrritoVacio } from '../../assets/img/cart-empty.svg'
<Button variant='link' className='carrito'><CarrritoVacio /></Button>

PARA DAR COLOR A UN SVG EN EL CSS
svg {
	color:white;
}

document.body.style = "background: green;";

_____________________________________
{/* PASAMOS UNA FUNCION POR PROPS CON ARGUMENTO, ASI NOS DARAN EL DATO DEL ARGUMENTO Y LO PODEMOS USAR AQUI  */}
        <BuscarCaja buscar={(parametro)=>alert(parametro)}/>
	<button onClick={()=>props.buscar("naaa")}>Buscar</button>
>>>>>>> ed0c5e1cb3696042e4c96848dae1860bf693dce0















